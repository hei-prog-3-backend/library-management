openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
          $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          $ref: "#/components/responses/Booklist_200"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/Available:
      get:
         summary: List of the books available
         operationId: getBooksAvailable
         tags:
           - Books
         responses:
           200:
             description: List of books available 
             content:
              application/json:
               schema: 
                type: array
                items:
                 $ref: "#/components/schemas/Book"
  /books/borrowed:
      get:
         summary:  List of the books not available
         operationId: getBooksUnVailable
         tags:
           - Books
         responses:
            200: 
              description: List of books not available
              content:
               application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Book"
         
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
          $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/topics:
      get:
         summary: get all author wiht list of topics
         operationId: getAuthorsTopics
         tags:
           - Authors
         responses:
          200:
           description: list of auhtors with topics
         requestBody:
           content:
            application/json:
             schema: 
               type: array
               items:
                 $ref: "#/components/schemas/AuthorsTopic"
  /books/{bookId}/authors/{authorId}:
    put:
       summary: updated auhtor of book specified by id
       operationId: update book
       tags:
        - Books
       parameters:
          - name: bookId
            in: path
            description: id of books to updated
            schema:
              type: string
            required: true
          - name: authorId
            in: path
            description: id of auhtor
            schema:
              type: string
            required: true
       responses:
         200: 
          description: updated successfuly
          content:
           application/json:
             schema: 
               $ref: "#/components/schemas/Book"
  /books/authors:
    put:
       summary: updated books 
       operationId: UpdateBookAuthor
       tags:
         - Books
       requestBody:
        content:
          application/json:
           schema: 
            type: array
            items:
              $ref: "#/components/schemas/UpdateBookAuthor"
       responses:
         200:
          description: updated successfuly
          content:
            application/json:
             schema: 
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
  /topic:
    put:
       summary: updated topic 
       operationId: updateTopic
       tags:
         - Topic 
       requestBody:
         content:
           application/json:
            schema:
             type: array
             items:
               $ref: "#/components/schemas/topic"
       responses:
         200:
           description: updated successfuly
           content:
             application/json:
              schema: 
               type: array
               items:
                 $ref: "#/components/schemas/topic"
    get:
        summary: get all topics
        operationId: getTopicbyName
        tags:
          - Topic
        description: get all topic specified name
        parameters:
          - in: query
            name: topicName
            required: false
            schema:
              type: string
          - in: query
            name: page
            required: false
            schema: 
              type: integer
              default: 1
          - in: query
            name: pageSize
            required:  false 
            schema:
              type: integer
              default: 50
        responses:
          200:
            description: the liste of topics filtered
            content:
              application/json:
               schema: 
                 type: array
                 items:
                   $ref: "#/components/schemas/topic"
  /topic/{tId}:
     delete:
        summary: delete an topic 
        operationId: deleteTopic
        tags:
           - Topic
        parameters:
           - name: tId
             in: path
             description: id of topic to deleted
             schema:
               type: string
             required: true
        responses:
          200:
            description: topic deleted
            content:
              application/json:
               schema: 
                 $ref: "#/components/schemas/topic"
  /books/{bookId}/topic/{topicId}:  
      put:
        summary: updated topic of book per id 
        operationId: update book
        tags:
        - Books
        parameters:
          - name: bookId
            in: path
            description: id of books to updated
            schema:
              type: string
            required: true
          - name: topicId
            in: path
            description: id of topic
            schema:
              type: string
            required: true
        responses:
         200: 
          description: updated successfuly
          content:
           application/json:
             schema: 
               $ref: "#/components/schemas/topic"   
  /books/topics:
       put:
          summary:  updated book
          operationId: UpdateBookTopic
          tags:
           - Books
          requestBody:
           content:
            application/json:
             schema: 
              type: array
              items:
               $ref: "#/components/schemas/UpdateBookTopic"
          responses:
           200:
            description: updated successfuly
            content:
             application/json:
              schema: 
               type: array
               items:
                $ref: "#/components/schemas/UpdateBookTopic"
  /books/import:
       post: 
          summary: list of books import 
          operationId: ListImportBook
          tags:
            - Books
          requestBody:
            content:
              application/json:
               schema:
                oneOf:
                  - $ref: "#/components/schemas/ImportBook"
              application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
                schema: 
                  type: string
          responses:
            200:
             description: list of books import
             content:
               application/json:
                schema: 
                  type: array
                  items:
                   $ref: "#/components/schemas/Book"
  /visitors:
     post: 
        summary: created Visitors
        operationId: CretateVisitor
        tags:
          - Visitors
        requestBody: 
           content:
             application/json:
              schema: 
               type: string
               items:
                 $ref: "#/components/schemas/Visitor"
        responses:
           200: 
             $ref: "#/components/responses/VisitorList_200"
           400:
             $ref: "#/components/responses/400"
  /VisitorActivity/VisitorId:
      get:
         summary: List of visitor activities between two period
         operationId: LisVisitorsActivities
         tags:
           - Visitors
         parameters:
           - name: VisitorId 
             in: path
             required: true
             schema: 
               type: string
           - name: StartDate
             in: query
             required: true
             schema: 
               type: string
               format: date
           - name: EndDate
             in: query
             required: true
             schema: 
                type: string
                format: date
         responses:
           200: 
              $ref: "#/components/responses/VisitorList_200"
           400:
             $ref: "#/components/responses/400"
  /LoanAndRender:
      post:
         summary: register of borrowed and render book
         operationId: AddLoanAndRender
         tags:
           - Visitors
         requestBody:
             content:
              application/json:
               schema:
                type: string
                items:
                  $ref: "#/components/schemas/LoanAndRender"
         responses:
            200: 
               description: Inserted a visitor activity
               content:
                application/json:
                 schema:
                   type: array
                   items:
                     $ref: "#/components/schemas/LoanAndRender"
      put:
         summary: updated the Loan and render books
         operationId: UpLoanRender
         tags:
           - Visitors
         requestBody: 
          content:
            application/json:
             schema: 
               type: array
               items:
                 $ref: "#/components/schemas/LoanAndRender" 
         responses:
           200: 
            description: List of borrowing and render books 
            content:
              application/json:
               schema: 
                type: array 
                items:
                  $ref: "#/components/schemas/LoanAndRender"             
  /auhtors/import:
      post: 
          summary: list of authors 
          operationId: ListAuthorsImport
          tags:
            - Authors
          requestBody:
             content:
              application/json:
               schema:
                 oneOf:
                   - $ref: "#/components/schemas/ImportAuthor"
              application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
               schema: 
                 type: string
          responses:
            200:
              description: list of authors
              content:
                application/json:
                  schema: 
                   type: array
                   items:
                     $ref: "#/components/schemas/Author"
components:
  securitySchemes:
   oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://library.com/api/oauth/login
          tokenUrl: https://library.com/api/oauth/token
          scopes:
            admin: Admin all access
            user: read API acces
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
    topic:
          type: object
          properties:
            TopicId:
              type: string
            topicName:
             type: string
             enum:
              - ROMANCE
              - COMEDY
              - OTHER
            releaseDate:
              type: string
              format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
       author:
          $ref: '#/components/schemas/Author'
    UpdateBookAuthor:
       type: object
       properties:
         bookId:
          type: string
         authorId:
          type: string  
    UpdateBookTopic:
       type: object
       properties:
         bookId:
           type: string
         TopicId:
           type: string
    AuthorsTopic:
        type: object
        properties:
          author:
            $ref: "#/components/schemas/Author"  
          topic:
             type: array
             items:
               $ref: "#/components/schemas/topic" 
    ResponseStatus:
        type: object
        properties:
          statusCode:
             type: integer
             example: 200
          Message:
             type: string  
    ResponseBodyTemplate:
       type: object
       properties:
         status:
           $ref: "#/components/schemas/ResponseStatus"
         code: 
           type: object
    BadRequestBody:
       allOf:
         - $ref: "#/components/schemas/ResponseBodyTemplate"
       example:
         status:
           code: 400
           Message: BAD REQUEST 
         body: { }
    Forbidden:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 403
          Message: server forbidden 
        body: { }
    ServerError:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 500
          Message: server error 
        body: { }
    BookListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/Book"
    VisitorListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/Visitor" 
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/ImportAuthor"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        idAuthor:
          type: string
        releaseDate:
          type: string
          format: date
    Visitor:
       type: object
       properties:
         id:
           type: string
         VisitorName:
           type: string
         reference:
           type: string
    LoanAndRender:
       type: object
       properties:
         id:
           type: string
         idVisitor:
           type: string
         bookId:
           type: string
         action: 
           type: string
           enum:
             - Loan 
             - Render 
         LoanDate:
           type: string
           format: date
         LoanTime:
           type: string
           format: time 
         RenderDate:
           type: string
           format: date
         RenderTime:
           type: string
           format: time
  parameters:
    queryPagination:
      in: query
      name: queryPagination
      description: number page of pagination
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
      required: false          
    pathPagination:
      in: path
      name: pathPagination
      description: number page of pagination
      schema: 
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
      required: true
  responses:
    Booklist_200:
      description: the list of the books
      content:
       application/json:
        schema:
          $ref: "#/components/schemas/BookListBody"
    VisitorList_200:
       description: the list of Visitors
       content:
        application/json:
         schema: 
            $ref: "#/components/schemas/VisitorListBody"
    400:
      description: Bad request
      content:
        application/json:
         schema: 
          $ref: "#/components/schemas/BadRequestBody"
    403:
       description: server forbidden
       content:
        application/json:
         schema: 
          $ref: "#/components/schemas/Forbidden"
    500:
       description: server error
       content:
        application/json:
         schema: 
          $ref: "#/components/schemas/ServerError"      