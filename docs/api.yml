openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22100
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: path
          name: pathPagination
          schema:
            type: integer
            items:
              $ref: '#/components/parameters/pathPagination'
          required: true
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post: 
      tags:
        - Books
      summary: returned books import
      operationId: postBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Book'
                  - $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          description: The list of books 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
       
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    post: 
      tags:
        - Authors
      summary: returned Author import
      operationId: postAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Author'
                  - $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          description: The list of Author 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
       
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - name: queryPagination
          in: query 
          schema:
            type: array
            items:
               $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Author'
                    - $ref: '#/components/schemas/AuthorError'
        400:
          description: BAD REQUEST
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/AuthorError'
        403:
          description: FORBIDDEN
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/AuthorError'
        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/AuthorError'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /books/authors/{bookId}/authors/{authorid}:
    put:
      summary: Update a author's book by given id 
      operationId: UpdateBook
      tags:
        - Books
      responses:
        200:
          description: The list of updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put: 
      summary: Update book Author 
      tags:
        - Books
      parameters:
        - in: query
          name: UpdateBookAuthor
          description: Filter return books by given name
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    AuthorError: 
       type: integer
       enum:
         - 200
         - 400
         - 403
         - 500
    Sex:
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportBook:
      type: object
      properties:
        idAuthor:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate: 
          type: string
          format: date
  parameters:
    queryPagination: 
        type: integer 
        name: queryPagination
        in:  query
        $ref: '#/components/parameters/queryPagination'
    pathPagination: 
        type: integer 
        name: queryPagination
        in:  path
        $ref: '#/components/parameters/pathPagination'

