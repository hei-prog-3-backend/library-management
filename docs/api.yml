openapi: 3.0.3
info:
  title: Library API

  version: 1.0.1
  description: STD22037
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors

  version: 1.1.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - Books

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: pageSize
          description: Number of items per page
          required: 
          schema:
            type: integer
            default: 50
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query

          name: releaseDateStart
          description: Filter books with release dates after or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with release dates before or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        # TODO3: add parameter to filter books by intervals of dates of the releaseDate

          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Associate a single book to an author
      operationId: associateBookAuthor
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: Associate some books to some authors
      operationId: associateBooksAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBook'

      responses:
        200:
          description: List of updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:

      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks

      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:

                  $ref: '#/components/schemas/Book'
  /authors:
    # TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Get a list of all authors. You can filter by name.
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: path
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of authors

                  $ref: '#/components/schemas/Author'
  /authors/page/{page}/size/{size}:
    get:
      tags:
        - Authors
      parameters:
        - in: path
          name: page
          schema:
            type: integer
          required: true
        - in: path
          name: size
          schema:
            type: integer
          required: true
      responses:
        200:
          description: The author deleted

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /authors/{aId}:

    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:

        - in: path
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update the author of a specific book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The ID of the new author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully
  /books/authors:
    put:
      summary: Update authors of multiple books
      operationId: updateMultipleBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors of the books updated successfully  

        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

components:
  parameters:
    Page:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      required: false
    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 30
      required: false
  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
  schemas:
    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: { }
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: { }
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/Author'
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string

        author:
          $ref: '#/components/schemas/Author'

        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string

        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/sex"
    sex:
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              type: string
    UpdateBookAuthor:

    UpdateBook:

      type: object
      properties:
        bookId:
          type: string

          description: The id of the book to update its authors
        authorId:
          type: string
          description: the id of the new author for the book
    responses:
      Status:
        type: object
        properties:
          code:
            type: integer
            description: Status code
          message:
            type: string
            description: Status message
      Body:
        type: object
        properties:
          data:
            type: object
            description: Response data
      Response200:
        description: The successful responses
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/coponents/responses/Status'
                - properties:
                  data:
                    $ref: '#/components/schemas/Book'
      Response400:
        description: Bad request response
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Status'
                - properties:
                  data:
                    type: object
                    description: Additional error data
      Response403:
        description: Forbidden response
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Status'
                - properties:
                    data:
                      type: object
                      description: Additional error data
      Response500:
        description: Internal server error response
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/responses/Status'
                - properties:
                    data:
                      type: object
                      description: Additional error data
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    
    

        authorId:
          type: string
      required:
        - bookId
        - authorId

