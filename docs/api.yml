openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22001
tags:
  - name: Books
  - name: Authors
  - name: Visiteurs
  - name: Books and Author
servers:
  - url: https://library.com
paths:
  /books/dispo:
    get:
      tags:
        - Books 
      summary: Get a books 
      description: The returned books disponibility 
      operationId: BookDispo 
      parameters:
        - $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /visiteurs:
    get: 
      tags:
        - Visiteurs
      summary: Get All Visitor 
      description: Get details of all visitors
      operationId: GetVisitors
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: if releaseDateMin is not provided , releaseDateMax is ignored 
          required: false
          schema:
            type: string
            format: date 
        - in: query
          name: releaseDateMax
          description: if releaseDateMax is not provided , releaseDateMin is ignored 
          required: false
          schema:
            type: string
            format: date 
        - in: query 
          name: Pagination
          required: false 
          schema: 
            type: integer
            items:
              $ref: '#/components/parameters'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/import: 
    post: 
      tags:
        - Books
      summary: returned books import
      operationId: postBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Book'
                  - $ref: '#/components/schemas/ImportBook'
          application/vnd:
            schema: 
              type: array 
              items:
                oneOf:
                  - $ref: '#/components/schemas/Book'
                  - $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /authors/ajouter:
    post:
      tags:
        - Authors
      summary: Add a new author
      description: Add a new author to the library
      operationId: addAuthor
      security:
        - administrateur: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: AuthorName
          description: Filter return Author by given name
          required: false
          schema:
            type: string
        - in: query 
          name: Pagination
          required: false 
          schema: 
            type: integer
            items:
              $ref: '#/components/parameters'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
    put:
      summary: Update an existing pet
      operationId: CrupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /authors/{id}: 
    delete:
      summary: Delete an Author 
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: Author identified to deleted 
          schema: 
            type: string 
          required: true
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /authors/import:
    post: 
      tags:
        - Authors 
      summary: returned Authors import
      operationId: postAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Author'
                  - $ref: '#/components/schemas/ImportAuthor'
          application/vnd:
            schema: 
              type: array 
              items:
                oneOf:
                  - $ref: '#/components/schemas/Author'
                  - $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse' 
  /books/{booksId}/author/{authorsId}: 
    put:
      summary: Update Author's Book
      operationId: UpdateAuthor
      tags:
        - Books and Author
      parameters:
         - name: idAuthor
           in: path
           description: Author identified 
           schema: 
            type: string 
           required: true
         - name: idBook
           in: path
           description: Book identified to  
           schema: 
            type: string 
           required: true
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /books/authors: 
    put:
      summary: Updated Book 's Author
      tags:
        - Books and Author
      parameters:
        - in: path
          name: UpdateBookAuthor
          required: true
          schema: 
            type: object 
            items:
              $ref: '#/components/schemas/UpdateBookAuthor'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookAuthor'
        required: true
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /books/empruntes:
    get:
      tags:
        - Books
      summary: Get book's taking by the visitor 
      description: Get a list of books
      operationId: getTakeBooks
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /books/emprunter:
    post:
      tags:
        - Books
      summary: Borrow a book
      description: Borrow a book onbehalf of a visitor
      operationId: borrowBook
      security:
      - administrateur: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                  minimum: 1
                visitorId:
                  type: integer
                  minimum: 1
              required:
                  - bookId
                  - visitorId
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /books/rendre: 
    post:
      tags:
        - Books
      summary: Return a book
      description: Return a book on behalf of a visitor
      operationId: returnBook
      security:
        - administrateur: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                  minimum: 1
                visitorId:
                  type: integer
                  minimum: 1
              required:
                - bookId
                - visitorId
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /books/disponibles:
    get:
      tags:
        - Books
      summary: Get available books
      description: Get a list of available books
      operationId: getAvailableBooks
      responses:
        200:
          $ref: '#/components/responses/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
components:
  schemas:
    Administrateur: 
      type: object
      properties:
        role:
          type: string
          enum:
            - administrateur
    DisponibilityBook: 
      type: boolean
      default: true
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author: 
          $ref: '#/components/schemas/Author'
        isDispo:
          type: boolean
          description: Indicates if the books is currently nodispo
        dispoId:
          type: integer
          description: id of the visitors who take the book
        startDate:
          type: string
          format: date
          description: Date when the visitors take the book
        returnDate:
          type: string
          format: date
          description: Date when the book is expected to be returned
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex' 
      required:
        - id
    Sex: 
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string 
          format: date 
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: integer
          minimum: 1
        authorId:
          type: integer
          minimum: 1
    SuccessResponseBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        body:
          type: object  # Remplacez ceci par le schéma réel de votre corps de réponse
    ErrorResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportBook:
      type: object
      properties:
        idAuthor:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate: 
          type: string
          format: date
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    Visiteures:
      type: object
      properties:
        id: 
          type: integer
        name: 
          type: string 
        reference: 
          type: string
  responses:
    SuccessResponse:
      description: Réponse réussie
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseBody'
    BadRequestResponse:
      description: Requête invalide
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenResponse:
      description: Accès refusé
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Erreur interne du serveur
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    queryPagination:
      in: query
      name: page
      description: Numéro de la page à récupérer
      required: false
      schema:
        type: integer
        minimum: 1
      example: 1
    pathPagination:
      in: path
      name: page
      description: Numéro de la page à récupérer
      required: true
      schema:
        type: integer
        minimum: 1
      example: 1
