openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22017
servers:
  - url: https://library.com
tags:
  - name: Authors
    description: Operations related to managing authors
  - name: Books
    description: Operations related to managing books
  - name: Visitors
    description: Operations related to visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/queryPaginationPage"
        - $ref: "#/components/parameters/queryPaginationPaginationSize"
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    put:
      security:
        - oauth2: [admin]
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    put:
      security:
        - oauth2: [admin]
      tags:
        - Authors
      summary: Create or update a  Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    delete:
      security:
        - oauth2: [admin]
      tags:
        - Authors
      summary: Delete an author
      description: Delete an author by their ID
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /books/{bookId}/authors/{authorId}:
    put:
      security:
        - oauth2: [admin]
      tags:
        - Authors
      summary: update author
      operationId: UpdateAuthor
      parameters:
        - in: path
          name: bookId
          description: Id of book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of Auhtor to update
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /books/authors:
    put:
      security:
        - oauth2: [admin]
      tags:
        - Authors
      summary: Update book-author link
      operationId: UpdateBookAuthor
      parameters:
        - in: query
          name: UpdateBookAuthor
          description: Updates the association between books and authors.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          $ref: "#/components/responses/UpdateBookAuthor_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /books/import:
    post:
      security:
        - oauth2: [admin]
      tags:
        - Books
      summary: Return list of imported books
      operationId: postBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ImportBook"
                - type: string
                  format: binary
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /authors/import:
    post:
      security:
        - oauth2: [admin]
      tags:
        - Authors
      summary: Return list of imported authors
      operationId: postAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ImportAuthor"
                - type: string
                  format: binary
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /authors/page/{page}/size/{size}:
    get:
      tags:
        - Authors
      parameters:
        - $ref: "#/components/parameters/pathPaginationPage"
        - $ref: "#/components/parameters/pathPaginationPageSize"
      responses:
        200:
          $ref: "#/components/responses/AuthorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /visitors:
    post:
      tags:
        - Visitors
      summary: add a new visitors
      operationId: postVisitors
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/visitor"
      responses:
        200:
          $ref: "#/components/responses/VisitorsList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /transaction:
    post:
      security:
        - oauth2: [admin]

      tags:
        - Visitors
      summary: Performs a book borrowing or return transaction
      operationId: postTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        200:
          $ref: "#/components/responses/Transaction_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /books/borrowed:
    get:
      tags:
        - Books
      summary: Retrieve the list of currently borrowed books
      operationId: getBorrowedBooks
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /books/available:
    get:
      tags:
        - Books
      summary: Retrieve the list of currently available books
      operationId: getAvailableBooks
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /visitor-activities/{visitorId}:
    get:
      tags:
        - Visitors
      summary: Retrieve the activities of a specific visitor within a specified time period
      parameters:
        - name: visitorId
          in: path
          required: true
          description: ID of the visitor
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date of the period
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date of the period
          schema:
            type: string
            format: date
      responses:
        "200":
          $ref: "#/components/responses/Transaction_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://library.com/api/oauth/login
          tokenUrl: https://library.com/api/oauth/token
          scopes:
            admin: Accès complet à l'API
            user: Accès en lecture et visualisation à l'API
  parameters:
    queryPaginationPage:
      in: query
      name: page
      description: Parameters for pagination in the query
      schema:
        type: integer
        default: 1
      required: false
    queryPaginationPaginationSize:
      in: query
      name: pageSize
      description: The number of items per page (default 50)
      schema:
        type: integer
        default: 50
      required: false
    pathPaginationPage:
      in: path
      name: page
      description: Parameters for pagination in the path
      schema:
        type: integer
        default: 1
      required: true

    pathPaginationPageSize:
      in: path
      name: size
      description: The number of items per page (default 50)
      schema:
        type: integer
        default: 50
      required: true
  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BookListBody"

    AuthorsList_200:
      description: List of authors
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorsListBody"

    VisitorsList_200:
      description: List of visitor
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/visitorListBody"

    Transaction_200:
      description: List of transaction
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/transactionBody"

    UpdateBookAuthor_200:
      description: List of UpdateBookAuthor
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/UpdateBookAuthorBody"

    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestBody"

    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForbiddenBody"

    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerErrorBody"

  schemas:
    Book:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
          nullable: true
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK

    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ResponseStatus"
        body:
          type: object

    BookListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/Book"

    AuthorsListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/Author"

    visitorListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/visitor"

    transactionBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/transaction"

    UpdateBookAuthorBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"

    BadRequestBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: {}

    ForbiddenBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: {}

    InternalServerErrorBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 500
          message: Internal Server Error.
        body: {}

    visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string

    transaction:
      type: object
      properties:
        idVisitor:
          type: string
        idBook:
          type: string
        action:
          type: string
          enum: [emprunt, rendu]
        BorrowingDate:
          type: string
          format: date
        RenderDate:
          type: string
          format: date
        BorrowingTime:
          type: string
          format: time
        RenderTime:
          type: string
          format: time

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - emprunt
            - rendu
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ImportBook:
      oneOf:
        - type: object
          properties:
            bookName:
              type: string
            author:
              type: string
            pageNumbers:
              type: integer
            topic:
              type: string
            releaseDate:
              type: string
            idAuthor:
              type: integer
        - type: string
          format: binary
    ImportAuthor:
      oneOf:
        - type: object
          properties:
            authorName:
              type: string
            sex:
              type: string
        - type: string
          format: binary
